{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyCollected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollectInactive",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "where",
          "type": "string"
        }
      ],
      "name": "ConfigError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ErrorInIds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HelixNotConfigured",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotClaimable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PrivateEventOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongHelix",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "CollectActiveChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "helix",
          "type": "uint256"
        }
      ],
      "name": "CurrentHelixChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "helix",
          "type": "uint256"
        }
      ],
      "name": "HelixChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        }
      ],
      "name": "NewContractURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allowancesSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "tokenId",
          "type": "uint16"
        }
      ],
      "name": "collect",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "tokenId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "collectWithSignature",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "helixId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "startId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "endId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "configureHelix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "createMessage",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "nonces",
          "type": "uint256[]"
        }
      ],
      "name": "createMessages",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "messages",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentHelixId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSplit",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "tokenId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "gift",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "helixes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "startId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "endId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "helixId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        }
      ],
      "name": "nonceForHelix",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onAttach",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onDisable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onEnable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newTokenURI",
          "type": "string"
        }
      ],
      "name": "overrideTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "setCollectActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newHelix",
          "type": "uint256"
        }
      ],
      "name": "setCurrentHelix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "helixId",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "startId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "endId",
          "type": "uint16"
        }
      ],
      "name": "setHelixIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "helixId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setHelixPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "helixId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "setHelixSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftContract_",
          "type": "address"
        }
      ],
      "name": "setNFTContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenURIOverride",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedAllowances",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "validateSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2691688",
    "logsBloom": "0x
    "blockHash": "0xc1f0e8a7eed14136c0e56da9f0b342087b6d2f1cd27e5cc0a61c9c22026e4bb3",
    "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc1f0e8a7eed14136c0e56da9f0b342087b6d2f1cd27e5cc0a61c9c22026e4bb3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xdf1280b84eee5cd4ce59294c59ec7288bd49034d7f3d142f57ba9b4779156364"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0xc1f0e8a7eed14136c0e56da9f0b342087b6d2f1cd27e5cc0a61c9c22026e4bb3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xa2ff335c1e8f4453e83546c0a966369c53f3e27cc4dcacbc2973964cd5583811"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 2,
        "blockHash": "0xc1f0e8a7eed14136c0e56da9f0b342087b6d2f1cd27e5cc0a61c9c22026e4bb3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xa2ff335c1e8f4453e83546c0a966369c53f3e27cc4dcacbc2973964cd5583811"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 3,
        "blockHash": "0xc1f0e8a7eed14136c0e56da9f0b342087b6d2f1cd27e5cc0a61c9c22026e4bb3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xa2ff335c1e8f4453e83546c0a966369c53f3e27cc4dcacbc2973964cd5583811"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000002",
        "logIndex": 4,
        "blockHash": "0xc1f0e8a7eed14136c0e56da9f0b342087b6d2f1cd27e5cc0a61c9c22026e4bb3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xa2ff335c1e8f4453e83546c0a966369c53f3e27cc4dcacbc2973964cd5583811"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000003",
        "logIndex": 5,
        "blockHash": "0xc1f0e8a7eed14136c0e56da9f0b342087b6d2f1cd27e5cc0a61c9c22026e4bb3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x280d2ced1a4851a3856eca2243dc7643773b754f35b199a9d6f6699461eef374",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0xcc65c00b63c085ef56a441de436d8e733d0402287c6b1c7ebe41cbb4d9877e81"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 6,
        "blockHash": "0xc1f0e8a7eed14136c0e56da9f0b342087b6d2f1cd27e5cc0a61c9c22026e4bb3"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "2691688",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "",
    "ipfs://QmeSaNkm8RRbJ1eTxeY7UjUWxWpGG5WZN31hkGEsXPjaa1/",
    "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "9af2fe0feed2a9277c3f49fad5634ada",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyCollected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectInactive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"where\",\"type\":\"string\"}],\"name\":\"ConfigError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ErrorInIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HelixNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotClaimable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrivateEventOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongHelix\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"CollectActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"helix\",\"type\":\"uint256\"}],\"name\":\"CurrentHelixChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"helix\",\"type\":\"uint256\"}],\"name\":\"HelixChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"}],\"name\":\"NewContractURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowancesSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"}],\"name\":\"collect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"collectWithSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"helixId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"startId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"endId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"configureHelix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"createMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nonces\",\"type\":\"uint256[]\"}],\"name\":\"createMessages\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"messages\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentHelixId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSplit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"gift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"helixes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"startId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"endId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"helixId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"nonceForHelix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onAttach\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newTokenURI\",\"type\":\"string\"}],\"name\":\"overrideTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"setCollectActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newHelix\",\"type\":\"uint256\"}],\"name\":\"setCurrentHelix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"helixId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"startId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"endId\",\"type\":\"uint16\"}],\"name\":\"setHelixIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"helixId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setHelixPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"helixId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setHelixSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract_\",\"type\":\"address\"}],\"name\":\"setNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenURIOverride\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedAllowances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Simon Fremaux (@dievardump)\",\"kind\":\"dev\",\"methods\":{\"allowancesSigner()\":{\"returns\":{\"_0\":\"the allowance signer address\"}},\"collect(uint16)\":{\"params\":{\"tokenId\":\"the token to buy\"}},\"collectWithSignature(uint16,uint256,bytes)\":{\"params\":{\"nonce\":\"a simple nonce, allowing multiple claims for one address\",\"signature\":\"the signature from helixes[currentHelixId].signer\",\"tokenId\":\"the tokenId to collect\"}},\"configureHelix(uint256,uint16,uint16,uint256,address)\":{\"params\":{\"endId\":\"the highest id to collect when this helix is active\",\"helixId\":\"the helix to configure\",\"price\":\"the price of collect for this helix\",\"signer\":\"the signer address (for private sale helixes)\",\"startId\":\"the lowest token id to collect when this helix is active\"}},\"constructor\":{\"params\":{\"baseURI_\":\"the baseURI containing the tokens metadata\",\"contractURI_\":\"The module URI (containing its metadata) - can be empty ''\",\"owner_\":\"Address to whom transfer ownership (can be address(0), then owner is deployer)\",\"signer\":\"the signer for phase 0\"}},\"contractURI()\":{\"returns\":{\"_0\":\"the URI where to find information about the module\"}},\"createMessage(address,uint256)\":{\"params\":{\"account\":\"the account to allow\",\"nonce\":\"the nonce\"},\"returns\":{\"_0\":\"the message to sign\"}},\"createMessages(address[],uint256[])\":{\"params\":{\"accounts\":\"the accounts to allow\",\"nonces\":\"the corresponding nonces\"},\"returns\":{\"messages\":\"the messages to sign\"}},\"getPrice(uint256)\":{\"params\":{\"tokenId\":\"to check price for\"},\"returns\":{\"_0\":\"the price for the token id in this helix\"}},\"getSplit()\":{\"returns\":{\"recipients\":\"the recipients\",\"shares\":\"their shares\"}},\"gift(uint16,address)\":{\"params\":{\"recipient\":\"the recipient to mint to\",\"tokenId\":\"the tokenId to mint\"}},\"nonceForHelix(uint256,uint256)\":{\"params\":{\"helixId\":\"the helix id\",\"nonce\":\"the nonce for this signature\"},\"returns\":{\"_0\":\"the nonce to sign\"}},\"onAttach()\":{\"returns\":{\"_0\":\"if the attach worked\"}},\"onEnable()\":{\"returns\":{\"_0\":\"if the enabling worked\"}},\"overrideTokenURI(uint256,string)\":{\"params\":{\"newTokenURI\":\"the new token uri\",\"tokenId\":\"tokenId\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(address,uint256)\":{\"details\":\"Contrary to EIP2981, modules are expected to return basisPoint for second parameters      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)\",\"params\":{\"registry\":\"registry to check id of\",\"tokenId\":\"token to check\"},\"returns\":{\"receiver\":\"and basisPoint for this tokenId\"}},\"royaltyInfo(uint256)\":{\"details\":\"Contrary to EIP2981, modules are expected to return basisPoint for second parameters      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)\",\"params\":{\"tokenId\":\"token to check\"},\"returns\":{\"_0\":\"and basisPoint for this tokenId\"}},\"setBaseURI(string)\":{\"params\":{\"newBaseURI\":\"the new base uri\"}},\"setCollectActive(bool)\":{\"params\":{\"isActive\":\"the new state (active or not)\"}},\"setContractURI(string)\":{\"params\":{\"newURI\":\"the new uri\"}},\"setCurrentHelix(uint256)\":{\"params\":{\"newHelix\":\"the new helix to mint from\"}},\"setHelixIds(uint256,uint16,uint16)\":{\"params\":{\"endId\":\"the highest id to collect when this helix is active\",\"helixId\":\"the helix to configure\",\"startId\":\"the lowest token id to collect when this helix is active\"}},\"setHelixPrice(uint256,uint256)\":{\"params\":{\"helixId\":\"the helix to configure\",\"price\":\"the price\"}},\"setHelixSigner(uint256,address)\":{\"params\":{\"helixId\":\"the helix to configure\",\"signer\":\"the signer address\"}},\"setNFTContract(address)\":{\"params\":{\"nftContract_\":\"the contract containing nft\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validateSignature(address,uint256,bytes)\":{\"details\":\"It ensures that _allowancesSigner signed a message containing (account, nonce, address(this))      and that this message was not already used\",\"params\":{\"account\":\"the account the allowance is associated to\",\"nonce\":\"the nonce associated to this allowance\",\"signature\":\"the signature by the allowance signer wallet\"},\"returns\":{\"_0\":\"the message to mark as used\"}},\"withdraw()\":{\"details\":\"Owner withdraw balance function\"}},\"title\":\"VisualMassageModule\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowancesSigner()\":{\"notice\":\"Helper to know allowancesSigner address\"},\"baseURI()\":{\"notice\":\"baseURI containing all metadata files\"},\"collect(uint16)\":{\"notice\":\"collect tokenId\"},\"collectActive()\":{\"notice\":\"if the collect of nfts is active or not\"},\"collectWithSignature(uint16,uint256,bytes)\":{\"notice\":\"Collect with a signature (ie: private sales)\"},\"configureHelix(uint256,uint16,uint16,uint256,address)\":{\"notice\":\"Configure an helix\"},\"constructor\":{\"notice\":\"constructor\"},\"contractURI()\":{\"notice\":\"returns an URI with information about the module\"},\"createMessage(address,uint256)\":{\"notice\":\"Helper that creates the message that signer needs to sign to allow a mint         this is usually also used when creating the allowances, to ensure \\\"message\\\"         is the same\"},\"createMessages(address[],uint256[])\":{\"notice\":\"Helper that creates a list of messages that signer needs to sign to allow mintings\"},\"currentHelixId()\":{\"notice\":\"the current helix to mint from\"},\"getPrice(uint256)\":{\"notice\":\"Returns a token id price to collect (reverts if token id not in current helix or already collected)\"},\"getSplit()\":{\"notice\":\"getter for recipients & their shares\"},\"gift(uint16,address)\":{\"notice\":\"Allows the owner of the contract to gift tokenId to recipient\"},\"helixes(uint256)\":{\"notice\":\"all helixes\"},\"nftContract()\":{\"notice\":\"the contract containing the NFTs\"},\"nonceForHelix(uint256,uint256)\":{\"notice\":\"Helper to calculate the nonce to sign for a given tuple (helix, nonce)\"},\"onAttach()\":{\"notice\":\"Called by a Token Registry whenever the module is Attached\"},\"onDisable()\":{\"notice\":\"Called by a Token Registry whenever the module is Disabled\"},\"onEnable()\":{\"notice\":\"this contract doesn't really care if it's enabled or not         since trying to mint on a contract where it's not enabled will fail\"},\"overrideTokenURI(uint256,string)\":{\"notice\":\"override a tokenURI. For reasons.\"},\"royaltyInfo(address,uint256)\":{\"notice\":\"Return royalties (recipient, basisPoint) for tokenId\"},\"royaltyInfo(uint256)\":{\"notice\":\"Return royalties (recipient, basisPoint) for tokenId\"},\"setBaseURI(string)\":{\"notice\":\"sets new base uri\"},\"setCollectActive(bool)\":{\"notice\":\"sets collect active\"},\"setContractURI(string)\":{\"notice\":\"sets contract uri\"},\"setCurrentHelix(uint256)\":{\"notice\":\"sets new helix\"},\"setHelixIds(uint256,uint16,uint16)\":{\"notice\":\"Allows to change startId and endId of an helix\"},\"setHelixPrice(uint256,uint256)\":{\"notice\":\"Allows to change the price for an helix\"},\"setHelixSigner(uint256,address)\":{\"notice\":\"Allows to change the signer for an helix\"},\"setNFTContract(address)\":{\"notice\":\"sets nft contract\"},\"tokenURIOverride(uint256)\":{\"notice\":\"overrides a tokenURI\"},\"validateSignature(address,uint256,bytes)\":{\"notice\":\"This function verifies that the current request is valid\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VisualMassageModule.sol\":\"VisualMassageModule\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@dievardump-web3/niftyforge/contracts/INiftyForge721.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title INiftyForge721\\n/// @author Simon Fremaux (@dievardump)\\n/// @notice Interface to interact with a NiftyFroge721 on a network\\ninterface INiftyForge721 {\\n    struct ModuleInit {\\n        address module;\\n        bool enabled;\\n        bool minter;\\n    }\\n\\n    /// @notice totalSupply access\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice helper to know if everyone can mint or only minters\\n    function isMintingOpenToAll() external view returns (bool);\\n\\n    /// @notice Toggle minting open to all state\\n    /// @param isOpen if the new state is open or not\\n    function setMintingOpenToAll(bool isOpen) external;\\n\\n    /// @notice Mint token to `to` with `uri`\\n    /// @param to address of recipient\\n    /// @param uri token metadata uri\\n    /// @param feeRecipient the recipient of royalties\\n    /// @param feeAmount the royalties amount. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @param transferTo the address to transfer the NFT to after mint\\n    ///        this is used when we want to mint the NFT to the creator address\\n    ///        before transferring it to a recipient\\n    /// @return tokenId the tokenId\\n    function mint(\\n        address to,\\n        string memory uri,\\n        address feeRecipient,\\n        uint256 feeAmount,\\n        address transferTo\\n    ) external returns (uint256 tokenId);\\n\\n    /// @notice Mint batch tokens to `to[i]` with `uri[i]`\\n    /// @param to array of address of recipients\\n    /// @param uris array of token metadata uris\\n    /// @param feeRecipients the recipients of royalties for each id\\n    /// @param feeAmounts the royalties amounts for each id. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @return tokenIds the tokenIds\\n    function mintBatch(\\n        address[] memory to,\\n        string[] memory uris,\\n        address[] memory feeRecipients,\\n        uint256[] memory feeAmounts\\n    ) external returns (uint256[] memory tokenIds);\\n\\n    /// @notice Mint `tokenId` to to` with `uri`\\n    ///         Because not all tokenIds have incremental ids\\n    ///         be careful with this function, it does not increment lastTokenId\\n    ///         and expects the minter to actually know what it is doing.\\n    ///         this also means, this function does not verify _maxTokenId\\n    /// @param to address of recipient\\n    /// @param uri token metadata uri\\n    /// @param tokenId token id wanted\\n    /// @param feeRecipient the recipient of royalties\\n    /// @param feeAmount the royalties amount. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @param transferTo the address to transfer the NFT to after mint\\n    ///        this is used when we want to mint the NFT to the creator address\\n    ///        before transferring it to a recipient\\n    /// @return tokenId the tokenId\\n    function mint(\\n        address to,\\n        string memory uri,\\n        uint256 tokenId_,\\n        address feeRecipient,\\n        uint256 feeAmount,\\n        address transferTo\\n    ) external returns (uint256 tokenId);\\n\\n    /// @notice Mint batch tokens to `to[i]` with `uris[i]`\\n    ///         Because not all tokenIds have incremental ids\\n    ///         be careful with this function, it does not increment lastTokenId\\n    ///         and expects the minter to actually know what it's doing.\\n    ///         this also means, this function does not verify _maxTokenId\\n    /// @param to array of address of recipients\\n    /// @param uris array of token metadata uris\\n    /// @param tokenIds array of token ids wanted\\n    /// @param feeRecipients the recipients of royalties for each id\\n    /// @param feeAmounts the royalties amounts for each id. From 0 to 10000\\n    ///        where 10000 == 100.00%; 1000 == 10.00%; 250 == 2.50%\\n    /// @return tokenIds the tokenIds\\n    function mintBatch(\\n        address[] memory to,\\n        string[] memory uris,\\n        uint256[] memory tokenIds,\\n        address[] memory feeRecipients,\\n        uint256[] memory feeAmounts\\n    ) external returns (uint256[] memory);\\n\\n    /// @notice Attach a module\\n    /// @param module a module to attach\\n    /// @param enabled if the module is enabled by default\\n    /// @param canModuleMint if the module has to be given the minter role\\n    function attachModule(\\n        address module,\\n        bool enabled,\\n        bool canModuleMint\\n    ) external;\\n\\n    /// @dev Allows owner to enable a module\\n    /// @param module to enable\\n    /// @param canModuleMint if the module has to be given the minter role\\n    function enableModule(address module, bool canModuleMint) external;\\n\\n    /// @dev Allows owner to disable a module\\n    /// @param module to disable\\n    function disableModule(address module, bool keepListeners) external;\\n\\n    /// @notice function that returns a string that can be used to render the current token\\n    /// @param tokenId tokenId\\n    /// @return the URI to render token\\n    function renderTokenURI(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0xd12b87676792addb707aed0111f555116ce31e3786e871cf56e14b7a63962ff1\",\"license\":\"MIT\"},\"@dievardump-web3/niftyforge/contracts/Modules/INFModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/introspection/IERC165.sol';\\n\\ninterface INFModule is IERC165 {\\n    /// @notice Called by a Token Registry whenever the module is Attached\\n    /// @return if the attach worked\\n    function onAttach() external returns (bool);\\n\\n    /// @notice Called by a Token Registry whenever the module is Enabled\\n    /// @return if the enabling worked\\n    function onEnable() external returns (bool);\\n\\n    /// @notice Called by a Token Registry whenever the module is Disabled\\n    function onDisable() external;\\n\\n    /// @notice returns an URI with information about the module\\n    /// @return the URI where to find information about the module\\n    function contractURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb6af5b0c187ae243551f1e00319e8dfdbf33956af7339d4b4e253e86e9f0f0a5\",\"license\":\"MIT\"},\"@dievardump-web3/niftyforge/contracts/Modules/INFModuleTokenURI.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './INFModule.sol';\\n\\ninterface INFModuleTokenURI is INFModule {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function tokenURI(address registry, uint256 tokenId)\\n        external\\n        view\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x58a063ee65def7a8aec6be6718bc30032b03685119e74e7bc84e54f3cd496fdc\",\"license\":\"MIT\"},\"@dievardump-web3/niftyforge/contracts/Modules/INFModuleWithRoyalties.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport './INFModule.sol';\\n\\ninterface INFModuleWithRoyalties is INFModule {\\n    /// @notice Return royalties (recipient, basisPoint) for tokenId\\n    /// @dev Contrary to EIP2981, modules are expected to return basisPoint for second parameters\\n    ///      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)\\n    /// @param tokenId token to check\\n    /// @return recipient and basisPoint for this tokenId\\n    function royaltyInfo(uint256 tokenId)\\n        external\\n        view\\n        returns (address recipient, uint256 basisPoint);\\n\\n    /// @notice Return royalties (recipient, basisPoint) for tokenId\\n    /// @dev Contrary to EIP2981, modules are expected to return basisPoint for second parameters\\n    ///      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)\\n    /// @param registry registry to check id of\\n    /// @param tokenId token to check\\n    /// @return recipient and basisPoint for this tokenId\\n    function royaltyInfo(address registry, uint256 tokenId)\\n        external\\n        view\\n        returns (address recipient, uint256 basisPoint);\\n}\\n\",\"keccak256\":\"0xfc6e709f87014f6edd094fb12a518ec55ce13867178e06eb183128c809e0e266\",\"license\":\"MIT\"},\"@dievardump-web3/niftyforge/contracts/Modules/NFBaseModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/introspection/ERC165.sol';\\nimport './INFModule.sol';\\n\\n/// @title NFBaseModule\\n/// @author Simon Fremaux (@dievardump)\\ncontract NFBaseModule is INFModule, ERC165 {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal _attached;\\n\\n    event NewContractURI(string contractURI);\\n\\n    string private _contractURI;\\n\\n    modifier onlyAttached(address registry) {\\n        require(_attached.contains(registry), '!NOT_ATTACHED!');\\n        _;\\n    }\\n\\n    constructor(string memory contractURI_) {\\n        _setContractURI(contractURI_);\\n    }\\n\\n    /// @inheritdoc\\tINFModule\\n    function contractURI()\\n        external\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return _contractURI;\\n    }\\n\\n    /// @inheritdoc\\tINFModule\\n    function onAttach() external virtual override returns (bool) {\\n        if (_attached.add(msg.sender)) {\\n            return true;\\n        }\\n\\n        revert('!ALREADY_ATTACHED!');\\n    }\\n\\n    /// @notice this contract doesn't really care if it's enabled or not\\n    ///         since trying to mint on a contract where it's not enabled will fail\\n    /// @inheritdoc\\tINFModule\\n    function onEnable() external pure virtual override returns (bool) {\\n        return true;\\n    }\\n\\n    /// @inheritdoc\\tINFModule\\n    function onDisable() external virtual override {}\\n\\n    function _setContractURI(string memory contractURI_) internal {\\n        _contractURI = contractURI_;\\n        emit NewContractURI(contractURI_);\\n    }\\n}\\n\",\"keccak256\":\"0xd70aa41dd2ec2f0f43a50866dc58c3f06ab1f7849ae8397b714901f094b4fc91\",\"license\":\"MIT\"},\"@dievardump-web3/signed-allowances/contracts/SignedAllowance.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\n\\n/// @title SignedAllowance\\n/// @author Simon Fremaux (@dievardump)\\ncontract SignedAllowance {\\n    using ECDSA for bytes32;\\n\\n    // list of already used allowances\\n    mapping(bytes32 => bool) public usedAllowances;\\n\\n    // address used to sign the allowances\\n    address private _allowancesSigner;\\n\\n    /// @notice Helper to know allowancesSigner address\\n    /// @return the allowance signer address\\n    function allowancesSigner() public view virtual returns (address) {\\n        return _allowancesSigner;\\n    }\\n\\n    /// @notice Helper that creates the message that signer needs to sign to allow a mint\\n    ///         this is usually also used when creating the allowances, to ensure \\\"message\\\"\\n    ///         is the same\\n    /// @param account the account to allow\\n    /// @param nonce the nonce\\n    /// @return the message to sign\\n    function createMessage(address account, uint256 nonce)\\n        public\\n        view\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encode(account, nonce, address(this)));\\n    }\\n\\n    /// @notice Helper that creates a list of messages that signer needs to sign to allow mintings\\n    /// @param accounts the accounts to allow\\n    /// @param nonces the corresponding nonces\\n    /// @return messages the messages to sign\\n    function createMessages(address[] memory accounts, uint256[] memory nonces)\\n        external\\n        view\\n        returns (bytes32[] memory messages)\\n    {\\n        require(accounts.length == nonces.length, '!LENGTH_MISMATCH!');\\n        messages = new bytes32[](accounts.length);\\n        for (uint256 i; i < accounts.length; i++) {\\n            messages[i] = createMessage(accounts[i], nonces[i]);\\n        }\\n    }\\n\\n    /// @notice This function verifies that the current request is valid\\n    /// @dev It ensures that _allowancesSigner signed a message containing (account, nonce, address(this))\\n    ///      and that this message was not already used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce associated to this allowance\\n    /// @param signature the signature by the allowance signer wallet\\n    /// @return the message to mark as used\\n    function validateSignature(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) public view returns (bytes32) {\\n        return\\n            _validateSignature(account, nonce, signature, allowancesSigner());\\n    }\\n\\n    /// @dev It ensures that signer signed a message containing (account, nonce, address(this))\\n    ///      and that this message was not already used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce associated to this allowance\\n    /// @param signature the signature by the allowance signer wallet\\n    /// @param signer the signer\\n    /// @return the message to mark as used\\n    function _validateSignature(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature,\\n        address signer\\n    ) internal view returns (bytes32) {\\n        bytes32 message = createMessage(account, nonce)\\n            .toEthSignedMessageHash();\\n\\n        // verifies that the sha3(account, nonce, address(this)) has been signed by signer\\n        require(message.recover(signature) == signer, '!INVALID_SIGNATURE!');\\n\\n        // verifies that the allowances was not already used\\n        require(usedAllowances[message] == false, '!ALREADY_USED!');\\n\\n        return message;\\n    }\\n\\n    /// @notice internal function that verifies an allowance and marks it as used\\n    ///         this function throws if signature is wrong or this nonce for this user has already been used\\n    /// @param account the account the allowance is associated to\\n    /// @param nonce the nonce\\n    /// @param signature the signature by the allowance wallet\\n    function _useAllowance(\\n        address account,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) internal {\\n        bytes32 message = validateSignature(account, nonce, signature);\\n        usedAllowances[message] = true;\\n    }\\n\\n    /// @notice Allows to change the allowance signer. This can be used to revoke any signed allowance not already used\\n    /// @param newSigner the new signer address\\n    function _setAllowancesSigner(address newSigner) internal {\\n        _allowancesSigner = newSigner;\\n    }\\n}\\n\",\"keccak256\":\"0xbeafdbbe0628b39033099913b2780b6a48ede9b6223165011f84a1430d9a9c3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/VisualMassageErrors.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// collect / sale\\nerror CollectInactive();\\nerror AlreadyCollected();\\nerror PrivateEventOnly();\\n\\n// helixes\\nerror HelixNotConfigured();\\nerror WrongHelix();\\nerror ErrorInIds();\\nerror NotClaimable();\\n\\n// value\\nerror WrongValue();\\nerror WithdrawError();\\n\\n// auth\\nerror NotAuthorized();\\nerror WrongSignature();\\n\\n// config\\nerror ConfigError(string where);\\n\",\"keccak256\":\"0x6bf207e4246e146636c4d97aeaaa77fffb26429bd820ff1644c9c6c5d896b257\",\"license\":\"MIT\"},\"contracts/VisualMassageModule.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"@dievardump-web3/niftyforge/contracts/INiftyForge721.sol\\\";\\nimport \\\"@dievardump-web3/niftyforge/contracts/Modules/NFBaseModule.sol\\\";\\nimport \\\"@dievardump-web3/niftyforge/contracts/Modules/INFModuleTokenURI.sol\\\";\\nimport \\\"@dievardump-web3/niftyforge/contracts/Modules/INFModuleWithRoyalties.sol\\\";\\n\\nimport \\\"@dievardump-web3/signed-allowances/contracts/SignedAllowance.sol\\\";\\n\\nimport \\\"./VisualMassageErrors.sol\\\";\\n\\ninterface IERC721 {\\n    function ownerOf(uint256) external view returns (address);\\n}\\n\\n/// @title VisualMassageModule\\n/// @author Simon Fremaux (@dievardump)\\ncontract VisualMassageModule is\\n    Ownable,\\n    NFBaseModule,\\n    INFModuleTokenURI,\\n    INFModuleWithRoyalties,\\n    SignedAllowance\\n{\\n    using Strings for uint256;\\n\\n    event CollectActiveChanged(bool isActive);\\n    event CurrentHelixChanged(uint256 helix);\\n    event HelixChanged(uint256 helix);\\n    event Claimed(bytes signature);\\n\\n    struct Helix {\\n        uint16 startId;\\n        uint16 endId;\\n        address signer; // if this helix needs a signer to be able to collect\\n        uint256 price;\\n    }\\n\\n    /// @notice baseURI containing all metadata files\\n    string public baseURI;\\n\\n    /// @notice the contract containing the NFTs\\n    address public nftContract;\\n\\n    /// @notice if the collect of nfts is active or not\\n    bool public collectActive;\\n\\n    /// @notice the current helix to mint from\\n    uint256 public currentHelixId;\\n\\n    /// @notice all helixes\\n    mapping(uint256 => Helix) public helixes;\\n\\n    /// @notice overrides a tokenURI\\n    mapping(uint256 => string) public tokenURIOverride;\\n\\n    /// @notice constructor\\n    /// @param contractURI_ The module URI (containing its metadata) - can be empty ''\\n    /// @param baseURI_ the baseURI containing the tokens metadata\\n    /// @param signer the signer for phase 0\\n    /// @param owner_ Address to whom transfer ownership (can be address(0), then owner is deployer)\\n    constructor(\\n        string memory contractURI_,\\n        string memory baseURI_,\\n        address signer,\\n        address owner_\\n    ) NFBaseModule(contractURI_) {\\n        if (bytes(baseURI_).length == 0) {\\n            revert ConfigError({where: \\\"baseURI\\\"});\\n        }\\n\\n        if (signer == address(0)) {\\n            revert ConfigError({where: \\\"signer\\\"});\\n        }\\n\\n        // phase 0 is a private event for contributors & previous holders & H\\n        // only people with a valid signature can claim\\n        configureHelix(0, 1, 300, 0, signer);\\n\\n        // phases 1 to 3\\n        configureHelix(1, 1, 100, 1 ether, address(0));\\n        configureHelix(2, 101, 200, 2 ether, address(0));\\n        configureHelix(3, 201, 300, 3 ether, address(0));\\n\\n        baseURI = baseURI_;\\n\\n        if (address(0) != owner_) {\\n            transferOwnership(owner_);\\n        }\\n\\n        emit CurrentHelixChanged(0);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(INFModuleTokenURI).interfaceId ||\\n            interfaceId == type(INFModuleWithRoyalties).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc\\tINFModuleWithRoyalties\\n    function royaltyInfo(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address, uint256)\\n    {\\n        return royaltyInfo(msg.sender, tokenId);\\n    }\\n\\n    /// @inheritdoc\\tINFModuleWithRoyalties\\n    function royaltyInfo(address, uint256)\\n        public\\n        view\\n        override\\n        returns (address receiver, uint256 basisPoint)\\n    {\\n        receiver = owner();\\n        basisPoint = 1000;\\n    }\\n\\n    /// @inheritdoc\\tINFModuleTokenURI\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        return tokenURI(msg.sender, tokenId);\\n    }\\n\\n    /// @inheritdoc\\tINFModuleTokenURI\\n    function tokenURI(address, uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        // some tokens, for reasons, might have a specific URI.\\n        string memory tokenURIOverride_ = tokenURIOverride[tokenId];\\n        if (bytes(tokenURIOverride_).length > 0) {\\n            return tokenURIOverride_;\\n        }\\n\\n        return string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"));\\n    }\\n\\n    /// @notice Helper to calculate the nonce to sign for a given tuple (helix, nonce)\\n    /// @param helixId the helix id\\n    /// @param nonce the nonce for this signature\\n    /// @return the nonce to sign\\n    function nonceForHelix(uint256 helixId, uint256 nonce)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(abi.encode(helixId, nonce)));\\n    }\\n\\n    /// @notice Returns a token id price to collect (reverts if token id not in current helix or already collected)\\n    /// @param tokenId to check price for\\n    /// @return the price for the token id in this helix\\n    function getPrice(uint256 tokenId) external view returns (uint256) {\\n        uint256 helixId = currentHelixId;\\n        Helix memory helix = helixes[helixId];\\n\\n        // verify helix tokenId\\n        if (tokenId < helix.startId || tokenId > helix.endId) {\\n            revert WrongHelix();\\n        }\\n\\n        // if the tokenId already has an owner, it can't be bought anymore\\n        try IERC721(nftContract).ownerOf(tokenId) {\\n            revert AlreadyCollected();\\n        } catch {\\n            // this means the token does not exist, so it's up to collect\\n            return helix.price;\\n        }\\n    }\\n\\n    /// @notice getter for recipients & their shares\\n    /// @return recipients the recipients\\n    /// @return shares their shares\\n    function getSplit()\\n        public\\n        view\\n        returns (address[] memory recipients, uint256[] memory shares)\\n    {\\n        recipients = new address[](4);\\n        recipients[0] = address(0xA22Dff3bB28C224b6e5F4421d55997656eE34CeA);\\n        recipients[1] = address(0xD1edDfcc4596CC8bD0bd7495beaB9B979fc50336);\\n        recipients[2] = address(0xeaf03CD48f9B6B5B9C776c1517ff5fdB958dc94e);\\n        recipients[3] = owner();\\n\\n        uint256 value = address(this).balance;\\n        shares = new uint256[](4);\\n        shares[0] = (value * 3) / 100;\\n        shares[1] = (value * 5) / 100;\\n        shares[2] = (value * 15) / 100;\\n        shares[3] = value - shares[0] - shares[1] - shares[2];\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///// Module                                      //\\n    ////////////////////////////////////////////////////\\n\\n    /// @inheritdoc\\tINFModule\\n    function onAttach()\\n        external\\n        virtual\\n        override(INFModule, NFBaseModule)\\n        returns (bool)\\n    {\\n        // only allows attachment if nftContract is not set\\n        // this saves one tx\\n        if (nftContract == address(0)) {\\n            nftContract = msg.sender;\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///// Collect                                     //\\n    ////////////////////////////////////////////////////\\n\\n    /// @notice collect tokenId\\n    /// @param tokenId the token to buy\\n    function collect(uint16 tokenId) external payable {\\n        if (!collectActive) revert CollectInactive();\\n\\n        uint256 helixId = currentHelixId;\\n        Helix memory helix = helixes[helixId];\\n\\n        // no signer allowed here\\n        if (helix.signer != address(0)) revert PrivateEventOnly();\\n\\n        _collect(helix, tokenId, msg.sender);\\n    }\\n\\n    /// @notice Collect with a signature (ie: private sales)\\n    /// @param tokenId the tokenId to collect\\n    /// @param nonce a simple nonce, allowing multiple claims for one address\\n    /// @param signature the signature from helixes[currentHelixId].signer\\n    function collectWithSignature(\\n        uint16 tokenId,\\n        uint256 nonce,\\n        bytes memory signature\\n    ) external payable {\\n        if (!collectActive) revert CollectInactive();\\n\\n        uint256 helixId = currentHelixId;\\n        Helix memory helix = helixes[helixId];\\n\\n        // need signer here\\n        if (helix.signer == address(0)) revert NotClaimable();\\n\\n        // create a unique nonce using nonce and helixId\\n        // this can allow one address to claim more than one per helix\\n        // if they get more signed messages\\n        uint256 _nonce = nonceForHelix(helixId, nonce);\\n\\n        // verifies that (msg.sender, (nonce, helix), address(this)) was signed\\n        // by helix.signer\\n        bytes32 message = _validateSignature(\\n            msg.sender,\\n            _nonce,\\n            signature,\\n            helix.signer\\n        );\\n        usedAllowances[message] = true;\\n\\n        _collect(helix, tokenId, msg.sender);\\n\\n        emit Claimed(signature);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///// Only owner                                  //\\n    ////////////////////////////////////////////////////\\n\\n    /// @dev Owner withdraw balance function\\n    function withdraw() external onlyOwner {\\n        (address[] memory recipients, uint256[] memory shares) = getSplit();\\n        uint256 length = recipients.length;\\n        for (uint256 i; i < length; i++) {\\n            (bool success, ) = recipients[i].call{value: shares[i]}(\\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Allows the owner of the contract to gift tokenId to recipient\\n    /// @param tokenId the tokenId to mint\\n    /// @param recipient the recipient to mint to\\n    function gift(uint16 tokenId, address recipient) external onlyOwner {\\n        // create a dummy helix for owner to gift whatever they want\\n        Helix memory helix = Helix({\\n            startId: 1,\\n            endId: 300,\\n            signer: address(0),\\n            price: 0\\n        });\\n\\n        _collect(helix, tokenId, recipient);\\n    }\\n\\n    /// @notice sets new base uri\\n    /// @param newBaseURI the new base uri\\n    function setBaseURI(string calldata newBaseURI) external onlyOwner {\\n        baseURI = newBaseURI;\\n    }\\n\\n    /// @notice sets nft contract\\n    /// @param nftContract_ the contract containing nft\\n    function setNFTContract(address nftContract_) external onlyOwner {\\n        nftContract = nftContract_;\\n    }\\n\\n    /// @notice sets contract uri\\n    /// @param newURI the new uri\\n    function setContractURI(string memory newURI) external onlyOwner {\\n        _setContractURI(newURI);\\n    }\\n\\n    /// @notice override a tokenURI. For reasons.\\n    /// @param tokenId tokenId\\n    /// @param newTokenURI the new token uri\\n    function overrideTokenURI(uint256 tokenId, string memory newTokenURI)\\n        external\\n        onlyOwner\\n    {\\n        tokenURIOverride[tokenId] = newTokenURI;\\n    }\\n\\n    /// @notice sets new helix\\n    /// @param newHelix the new helix to mint from\\n    function setCurrentHelix(uint256 newHelix) external onlyOwner {\\n        if (helixes[newHelix].endId == 0) {\\n            revert HelixNotConfigured();\\n        }\\n\\n        currentHelixId = newHelix;\\n        emit CurrentHelixChanged(newHelix);\\n    }\\n\\n    /// @notice sets collect active\\n    /// @param isActive the new state (active or not)\\n    function setCollectActive(bool isActive) external onlyOwner {\\n        collectActive = isActive;\\n        emit CollectActiveChanged(isActive);\\n    }\\n\\n    /// @notice Configure an helix\\n    /// @param helixId the helix to configure\\n    /// @param startId the lowest token id to collect when this helix is active\\n    /// @param endId the highest id to collect when this helix is active\\n    /// @param price the price of collect for this helix\\n    /// @param signer the signer address (for private sale helixes)\\n    function configureHelix(\\n        uint256 helixId,\\n        uint16 startId,\\n        uint16 endId,\\n        uint256 price,\\n        address signer\\n    ) public onlyOwner {\\n        helixes[helixId] = Helix({\\n            startId: startId,\\n            endId: endId,\\n            price: price,\\n            signer: signer\\n        });\\n\\n        emit HelixChanged(helixId);\\n    }\\n\\n    /// @notice Allows to change startId and endId of an helix\\n    /// @param helixId the helix to configure\\n    /// @param startId the lowest token id to collect when this helix is active\\n    /// @param endId the highest id to collect when this helix is active\\n    function setHelixIds(\\n        uint256 helixId,\\n        uint16 startId,\\n        uint16 endId\\n    ) external onlyOwner {\\n        if (startId > endId || endId == 0) {\\n            revert ErrorInIds();\\n        }\\n\\n        Helix storage helix = helixes[helixId];\\n        if (helix.endId == 0) {\\n            revert HelixNotConfigured();\\n        }\\n\\n        helix.startId = startId;\\n        helix.endId = endId;\\n        emit HelixChanged(helixId);\\n    }\\n\\n    /// @notice Allows to change the price for an helix\\n    /// @param helixId the helix to configure\\n    /// @param price the price\\n    function setHelixPrice(uint256 helixId, uint256 price) external onlyOwner {\\n        Helix storage helix = helixes[helixId];\\n        if (helix.endId == 0) {\\n            revert HelixNotConfigured();\\n        }\\n\\n        helix.price = price;\\n        emit HelixChanged(helixId);\\n    }\\n\\n    /// @notice Allows to change the signer for an helix\\n    /// @param helixId the helix to configure\\n    /// @param signer the signer address\\n    function setHelixSigner(uint256 helixId, address signer)\\n        external\\n        onlyOwner\\n    {\\n        Helix storage helix = helixes[helixId];\\n        if (helix.endId == 0) {\\n            revert HelixNotConfigured();\\n        }\\n\\n        helix.signer = signer;\\n        emit HelixChanged(helixId);\\n    }\\n\\n    ////////////////////////////////////////////////////\\n    ///// Internal                                    //\\n    ////////////////////////////////////////////////////\\n\\n    /// @dev used to collect\\n    function _collect(\\n        Helix memory helix,\\n        uint16 tokenId,\\n        address recipient\\n    ) internal {\\n        // verify helix tokenId\\n        if (tokenId < helix.startId || tokenId > helix.endId) {\\n            revert WrongHelix();\\n        }\\n\\n        // verify helix price\\n        if (msg.value != helix.price) {\\n            revert WrongValue();\\n        }\\n\\n        // mint tokenId\\n        INiftyForge721(nftContract).mint(\\n            recipient,\\n            \\\"\\\",\\n            uint256(tokenId),\\n            address(0),\\n            0,\\n            address(0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x3936ef384a948b9977756b9d07f7d4e0a5641f4e53a452ee54b86d91ada82991\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200316e3803806200316e8339810160408190526200003491620005b9565b836200004033620001a0565b6200004b81620001f0565b5082516200008b576040516307985a7560e01b81526020600482015260076024820152666261736555524960c81b60448201526064015b60405180910390fd5b6001600160a01b038216620000cd576040516307985a7560e01b815260206004820152600660248201526539b4b3b732b960d11b604482015260640162000082565b620000e06000600161012c828662000242565b620000fa6001806064670de0b6b3a7640000600062000242565b620001156002606560c8671bc16d674ec80000600062000242565b62000131600360c961012c6729a2241af62c0000600062000242565b8251620001469060069060208601906200041c565b506001600160a01b03811615620001625762000162816200035c565b604051600081527fcc65c00b63c085ef56a441de436d8e733d0402287c6b1c7ebe41cbb4d9877e819060200160405180910390a150505050620006ba565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051620002059060039060208401906200041c565b507fdf1280b84eee5cd4ce59294c59ec7288bd49034d7f3d142f57ba9b47791563648160405162000237919062000648565b60405180910390a150565b6000546001600160a01b031633146200028d5760405162461bcd60e51b815260206004820181905260248201526000805160206200314e833981519152604482015260640162000082565b6040805160808101825261ffff808716825285811660208084019182526001600160a01b038087168587019081526060860189815260008d8152600990945292879020955186549451915190921664010000000002600160201b600160c01b0319918616620100000263ffffffff199095169290951691909117929092179190911691909117825551600190910155517fa2ff335c1e8f4453e83546c0a966369c53f3e27cc4dcacbc2973964cd5583811906200034d9087815260200190565b60405180910390a15050505050565b6000546001600160a01b03163314620003a75760405162461bcd60e51b815260206004820181905260248201526000805160206200314e833981519152604482015260640162000082565b6001600160a01b0381166200040e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000082565b6200041981620001a0565b50565b8280546200042a906200067d565b90600052602060002090601f0160209004810192826200044e576000855562000499565b82601f106200046957805160ff191683800117855562000499565b8280016001018555821562000499579182015b82811115620004995782518255916020019190600101906200047c565b50620004a7929150620004ab565b5090565b5b80821115620004a75760008155600101620004ac565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004f5578181015183820152602001620004db565b8381111562000505576000848401525b50505050565b600082601f8301126200051d57600080fd5b81516001600160401b03808211156200053a576200053a620004c2565b604051601f8301601f19908116603f01168101908282118183101715620005655762000565620004c2565b816040528381528660208588010111156200057f57600080fd5b62000592846020830160208901620004d8565b9695505050505050565b80516001600160a01b0381168114620005b457600080fd5b919050565b60008060008060808587031215620005d057600080fd5b84516001600160401b0380821115620005e857600080fd5b620005f6888389016200050b565b955060208701519150808211156200060d57600080fd5b506200061c878288016200050b565b9350506200062d604086016200059c565b91506200063d606086016200059c565b905092959194509250565b602081526000825180602084015262000669816040850160208701620004d8565b601f01601f19169190910160400192915050565b600181811c908216806200069257607f821691505b60208210811415620006b457634e487b7160e01b600052602260045260246000fd5b50919050565b612a8480620006ca6000396000f3fe60806040526004361061023b5760003560e01c80638da5cb5b1161012e578063cef6d368116100ab578063e9dc63751161006f578063e9dc637514610752578063ec7557d314610772578063ed1b314414610788578063f2fde38b1461079d578063feff1999146107bd57600080fd5b8063cef6d368146106ca578063d56d229d146106ea578063e4bfcc601461070a578063e75722301461071d578063e8a3d4851461073d57600080fd5b8063b967810b116100f2578063b967810b14610610578063ba13b5fd14610657578063bb77e7961461066a578063c87b56dd1461068a578063c8966244146106aa57600080fd5b80638da5cb5b14610512578063938e3d7b146105305780639906b9fb14610550578063a7ccabdf146105dc578063b079ac90146105fc57600080fd5b80635d7d02cb116101bc578063777c4ec411610180578063777c4ec41461045257806382d54e8b146104725780638838b5c314610492578063890621da146104c45780638928b9ff146104f257600080fd5b80635d7d02cb146103ae57806364499494146103ce5780636c0360eb146103ee5780636c4a412c14610410578063715018a61461043d57600080fd5b80632782d6c7116102035780632782d6c71461030b5780633ccfd60b1461034a5780634c85eb1f1461035f57806355f804b31461036e5780635b4a505d1461038e57600080fd5b806301ffc9a714610240578063035d6ea51461027557806305d4eef91461029657806312ab3c27146102b8578063195e8708146102db575b600080fd5b34801561024c57600080fd5b5061026061025b36600461212a565b6107dd565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5060075461026090600160a01b900460ff1681565b3480156102a257600080fd5b506102b66102b1366004612187565b61082f565b005b3480156102c457600080fd5b506102cd61091f565b60405161026c9291906121e2565b3480156102e757600080fd5b506102606102f6366004612266565b60046020526000908152604090205460ff1681565b34801561031757600080fd5b5061032b61032636600461227f565b610b99565b604080516001600160a01b03909316835260208301919091520161026c565b34801561035657600080fd5b506102b6610bba565b34801561036b57600080fd5b50005b34801561037a57600080fd5b506102b66103893660046122ab565b610ca5565b34801561039a57600080fd5b506102b66103a936600461231d565b610ce0565b3480156103ba57600080fd5b506102b66103c9366004612404565b610d8c565b3480156103da57600080fd5b506102b66103e9366004612266565b610dd5565b3480156103fa57600080fd5b50610403610e71565b60405161026c91906124a3565b34801561041c57600080fd5b5061043061042b366004612545565b610eff565b60405161026c91906125fd565b34801561044957600080fd5b506102b661100a565b34801561045e57600080fd5b506102b661046d366004612641565b61103e565b34801561047e57600080fd5b506102b661048d36600461267d565b611120565b34801561049e57600080fd5b506005546001600160a01b03165b6040516001600160a01b03909116815260200161026c565b3480156104d057600080fd5b506104e46104df3660046126a9565b61117b565b60405190815260200161026c565b3480156104fe57600080fd5b506102b661050d366004612702565b6111a2565b34801561051e57600080fd5b506000546001600160a01b03166104ac565b34801561053c57600080fd5b506102b661054b366004612724565b611228565b34801561055c57600080fd5b506105a861056b366004612266565b6009602052600090815260409020805460019091015461ffff80831692620100008104909116916401000000009091046001600160a01b03169084565b6040805161ffff95861681529490931660208501526001600160a01b0390911691830191909152606082015260800161026c565b3480156105e857600080fd5b506102b66105f7366004612759565b61125e565b34801561060857600080fd5b506001610260565b34801561061c57600080fd5b506104e461062b366004612702565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6102b6610665366004612776565b6112aa565b34801561067657600080fd5b50610403610685366004612266565b6113e8565b34801561069657600080fd5b506104036106a5366004612266565b611401565b3480156106b657600080fd5b506102b66106c5366004612794565b61140d565b3480156106d657600080fd5b5061032b6106e5366004612266565b611484565b3480156106f657600080fd5b506007546104ac906001600160a01b031681565b6102b66107183660046127b6565b61149a565b34801561072957600080fd5b506104e4610738366004612266565b611544565b34801561074957600080fd5b5061040361166f565b34801561075e57600080fd5b5061040361076d36600461227f565b611701565b34801561077e57600080fd5b506104e460085481565b34801561079457600080fd5b506102606117e4565b3480156107a957600080fd5b506102b66107b8366004612759565b611815565b3480156107c957600080fd5b506104e46107d836600461227f565b6118ad565b60006001600160e01b03198216630434e6b560e31b148061080e57506001600160e01b0319821663e97405af60e01b145b8061082957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146108625760405162461bcd60e51b8152600401610859906127d1565b60405180910390fd5b6040805160808101825261ffff808716825285811660208084019182526001600160a01b038087168587019081526060860189815260008d8152600990945292879020955186549451915190921664010000000002640100000000600160c01b0319918616620100000263ffffffff19909516929095169190911792909217919091169190911782555160019091015551600080516020612a2f833981519152906109109087815260200190565b60405180910390a15050505050565b60408051600480825260a082019092526060918291906020820160808036833701905050915073a22dff3bb28c224b6e5f4421d55997656ee34cea8260008151811061096d5761096d612806565b60200260200101906001600160a01b031690816001600160a01b03168152505073d1eddfcc4596cc8bd0bd7495beab9b979fc50336826001815181106109b5576109b5612806565b60200260200101906001600160a01b031690816001600160a01b03168152505073eaf03cd48f9b6b5b9c776c1517ff5fdb958dc94e826002815181106109fd576109fd612806565b6001600160a01b0392831660209182029290920101526000541682600381518110610a2a57610a2a612806565b6001600160a01b039290921660209283029190910182015260408051600480825260a08201909252479290919082016080803683370190505091506064610a72826003612832565b610a7c9190612867565b82600081518110610a8f57610a8f612806565b60209081029190910101526064610aa7826005612832565b610ab19190612867565b82600181518110610ac457610ac4612806565b60209081029190910101526064610adc82600f612832565b610ae69190612867565b82600281518110610af957610af9612806565b60200260200101818152505081600281518110610b1857610b18612806565b602002602001015182600181518110610b3357610b33612806565b602002602001015183600081518110610b4e57610b4e612806565b602002602001015183610b61919061287b565b610b6b919061287b565b610b75919061287b565b82600381518110610b8857610b88612806565b602002602001018181525050509091565b600080610bae6000546001600160a01b031690565b946103e8945092505050565b6000546001600160a01b03163314610be45760405162461bcd60e51b8152600401610859906127d1565b600080610bef61091f565b8151919350915060005b81811015610c9d576000848281518110610c1557610c15612806565b60200260200101516001600160a01b0316848381518110610c3857610c38612806565b602002602001015160405160006040518083038185875af1925050503d8060008114610c80576040519150601f19603f3d011682016040523d82523d6000602084013e610c85565b606091505b50509050508080610c9590612892565b915050610bf9565b50505050565b565b6000546001600160a01b03163314610ccf5760405162461bcd60e51b8152600401610859906127d1565b610cdb6006838361201d565b505050565b6000546001600160a01b03163314610d0a5760405162461bcd60e51b8152600401610859906127d1565b6000828152600960205260409020805462010000900461ffff16610d4157604051631ee8d69960e01b815260040160405180910390fd5b8054640100000000600160c01b0319166401000000006001600160a01b03841602178155604051838152600080516020612a2f833981519152906020015b60405180910390a1505050565b6000546001600160a01b03163314610db65760405162461bcd60e51b8152600401610859906127d1565b6000828152600a602090815260409091208251610cdb928401906120a1565b6000546001600160a01b03163314610dff5760405162461bcd60e51b8152600401610859906127d1565b60008181526009602052604090205462010000900461ffff16610e3557604051631ee8d69960e01b815260040160405180910390fd5b60088190556040518181527fcc65c00b63c085ef56a441de436d8e733d0402287c6b1c7ebe41cbb4d9877e81906020015b60405180910390a150565b60068054610e7e906128ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610eaa906128ad565b8015610ef75780601f10610ecc57610100808354040283529160200191610ef7565b820191906000526020600020905b815481529060010190602001808311610eda57829003601f168201915b505050505081565b60608151835114610f465760405162461bcd60e51b8152602060048201526011602482015270214c454e4754485f4d49534d415443482160781b6044820152606401610859565b825167ffffffffffffffff811115610f6057610f6061234d565b604051908082528060200260200182016040528015610f89578160200160208202803683370190505b50905060005b835181101561100357610fd4848281518110610fad57610fad612806565b6020026020010151848381518110610fc757610fc7612806565b60200260200101516118ad565b828281518110610fe657610fe6612806565b602090810291909101015280610ffb81612892565b915050610f8f565b5092915050565b6000546001600160a01b031633146110345760405162461bcd60e51b8152600401610859906127d1565b610ca360006118f0565b6000546001600160a01b031633146110685760405162461bcd60e51b8152600401610859906127d1565b8061ffff168261ffff161180611080575061ffff8116155b1561109e57604051630baa894960e11b815260040160405180910390fd5b6000838152600960205260409020805462010000900461ffff166110d557604051631ee8d69960e01b815260040160405180910390fd5b805461ffff838116620100000263ffffffff1990921690851617178155604051600080516020612a2f833981519152906111129086815260200190565b60405180910390a150505050565b6000546001600160a01b0316331461114a5760405162461bcd60e51b8152600401610859906127d1565b604080516080810182526001815261012c602082015260009181018290526060810191909152610cdb818484611940565b600061119a8484846111956005546001600160a01b031690565b611a53565b949350505050565b6000546001600160a01b031633146111cc5760405162461bcd60e51b8152600401610859906127d1565b6000828152600960205260409020805462010000900461ffff1661120357604051631ee8d69960e01b815260040160405180910390fd5b60018101829055604051838152600080516020612a2f83398151915290602001610d7f565b6000546001600160a01b031633146112525760405162461bcd60e51b8152600401610859906127d1565b61125b81611b71565b50565b6000546001600160a01b031633146112885760405162461bcd60e51b8152600401610859906127d1565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600754600160a01b900460ff166112d45760405163f89cd0eb60e01b815260040160405180910390fd5b6008546000818152600960209081526040918290208251608081018452815461ffff808216835262010000820416938201939093526401000000009092046001600160a01b03169282018390526001015460608201529061134857604051633123d42760e11b815260040160405180910390fd5b6040805160208082018590528183018790528251808303840181526060909201909252805191012060006113823383878660400151611a53565b6000818152600460205260409020805460ff1916600117905590506113a8838833611940565b7f4ad9c0f6018b9d6efdb6bfb76472c84cca0806aab365506ef8f5fe7e2ab382b1856040516113d791906124a3565b60405180910390a150505050505050565b600a6020526000908152604090208054610e7e906128ad565b60606108293383611701565b6000546001600160a01b031633146114375760405162461bcd60e51b8152600401610859906127d1565b60078054821515600160a01b0260ff60a01b199091161790556040517f40ef16dfbd2f4c9db7d4b66b5a84c42028cdc60338dce0eb9bd4e8b1b1961e4490610e6690831515815260200190565b6000806114913384610b99565b91509150915091565b600754600160a01b900460ff166114c45760405163f89cd0eb60e01b815260040160405180910390fd5b6008546000818152600960209081526040918290208251608081018452815461ffff808216835262010000820416938201939093526401000000009092046001600160a01b031692820183905260010154606082015290156115395760405163cb559a0760e01b815260040160405180910390fd5b610cdb818433611940565b60085460008181526009602090815260408083208151608081018352815461ffff8082168084526201000083049091169583019590955264010000000090046001600160a01b031692810192909252600101546060820152919291908410806115b45750806020015161ffff1684115b156115d257604051639e4e47f560e01b815260040160405180910390fd5b6007546040516331a9108f60e11b8152600481018690526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561161657600080fd5b505afa925050508015611646575060408051601f3d908101601f19168201909252611643918101906128e8565b60015b61165557606001519392505050565b50604051632340e67360e21b815260040160405180910390fd5b60606003805461167e906128ad565b80601f01602080910402602001604051908101604052809291908181526020018280546116aa906128ad565b80156116f75780601f106116cc576101008083540402835291602001916116f7565b820191906000526020600020905b8154815290600101906020018083116116da57829003601f168201915b5050505050905090565b6000818152600a602052604081208054606092919061171f906128ad565b80601f016020809104026020016040519081016040528092919081815260200182805461174b906128ad565b80156117985780601f1061176d57610100808354040283529160200191611798565b820191906000526020600020905b81548152906001019060200180831161177b57829003601f168201915b505050505090506000815111156117b0579050610829565b60066117bb84611bb4565b6040516020016117cc929190612921565b60405160208183030381529060405291505092915050565b6007546000906001600160a01b031661180f5750600780546001600160a01b03191633179055600190565b50600090565b6000546001600160a01b0316331461183f5760405162461bcd60e51b8152600401610859906127d1565b6001600160a01b0381166118a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610859565b61125b816118f0565b604080516001600160a01b038416602082015290810182905230606082015260009060800160405160208183030381529060405280519060200120905092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b826000015161ffff168261ffff1610806119655750826020015161ffff168261ffff16115b1561198357604051639e4e47f560e01b815260040160405180910390fd5b826060015134146119a757604051632635240760e21b815260040160405180910390fd5b600754604051637971ab0f60e11b81526001600160a01b03838116600483015260c06024830152600060c4830181905261ffff86166044840152606483018190526084830181905260a48301529091169063f2e3561e9060e401602060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d91906129d3565b600080611ab6611a6387876118ad565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506001600160a01b038316611acc8286611cb2565b6001600160a01b031614611b185760405162461bcd60e51b815260206004820152601360248201527221494e56414c49445f5349474e41545552452160681b6044820152606401610859565b60008181526004602052604090205460ff1615611b685760405162461bcd60e51b815260206004820152600e60248201526d21414c52454144595f555345442160901b6044820152606401610859565b95945050505050565b8051611b849060039060208401906120a1565b507fdf1280b84eee5cd4ce59294c59ec7288bd49034d7f3d142f57ba9b477915636481604051610e6691906124a3565b606081611bd85750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c025780611bec81612892565b9150611bfb9050600a83612867565b9150611bdc565b60008167ffffffffffffffff811115611c1d57611c1d61234d565b6040519080825280601f01601f191660200182016040528015611c47576020820181803683370190505b5090505b841561119a57611c5c60018361287b565b9150611c69600a866129ec565b611c74906030612a00565b60f81b818381518110611c8957611c89612806565b60200101906001600160f81b031916908160001a905350611cab600a86612867565b9450611c4b565b6000806000611cc18585611cd6565b91509150611cce81611d46565b509392505050565b600080825160411415611d0d5760208301516040840151606085015160001a611d0187828585611f01565b94509450505050611d3f565b825160401415611d375760208301516040840151611d2c868383611fee565b935093505050611d3f565b506000905060025b9250929050565b6000816004811115611d5a57611d5a612a18565b1415611d635750565b6001816004811115611d7757611d77612a18565b1415611dc55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610859565b6002816004811115611dd957611dd9612a18565b1415611e275760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610859565b6003816004811115611e3b57611e3b612a18565b1415611e945760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610859565b6004816004811115611ea857611ea8612a18565b141561125b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610859565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611f385750600090506003611fe5565b8460ff16601b14158015611f5057508460ff16601c14155b15611f615750600090506004611fe5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611fb5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611fde57600060019250925050611fe5565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161200f87828885611f01565b935093505050935093915050565b828054612029906128ad565b90600052602060002090601f01602090048101928261204b5760008555612091565b82601f106120645782800160ff19823516178555612091565b82800160010185558215612091579182015b82811115612091578235825591602001919060010190612076565b5061209d929150612115565b5090565b8280546120ad906128ad565b90600052602060002090601f0160209004810192826120cf5760008555612091565b82601f106120e857805160ff1916838001178555612091565b82800160010185558215612091579182015b828111156120915782518255916020019190600101906120fa565b5b8082111561209d5760008155600101612116565b60006020828403121561213c57600080fd5b81356001600160e01b03198116811461215457600080fd5b9392505050565b803561ffff8116811461216d57600080fd5b919050565b6001600160a01b038116811461125b57600080fd5b600080600080600060a0868803121561219f57600080fd5b853594506121af6020870161215b565b93506121bd6040870161215b565b92506060860135915060808601356121d481612172565b809150509295509295909350565b604080825283519082018190526000906020906060840190828701845b828110156122245781516001600160a01b0316845292840192908401906001016121ff565b5050508381038285015284518082528583019183019060005b818110156122595783518352928401929184019160010161223d565b5090979650505050505050565b60006020828403121561227857600080fd5b5035919050565b6000806040838503121561229257600080fd5b823561229d81612172565b946020939093013593505050565b600080602083850312156122be57600080fd5b823567ffffffffffffffff808211156122d657600080fd5b818501915085601f8301126122ea57600080fd5b8135818111156122f957600080fd5b86602082850101111561230b57600080fd5b60209290920196919550909350505050565b6000806040838503121561233057600080fd5b82359150602083013561234281612172565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561238c5761238c61234d565b604052919050565b600082601f8301126123a557600080fd5b813567ffffffffffffffff8111156123bf576123bf61234d565b6123d2601f8201601f1916602001612363565b8181528460208386010111156123e757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561241757600080fd5b82359150602083013567ffffffffffffffff81111561243557600080fd5b61244185828601612394565b9150509250929050565b60005b8381101561246657818101518382015260200161244e565b83811115610c9d5750506000910152565b6000815180845261248f81602086016020860161244b565b601f01601f19169290920160200192915050565b6020815260006121546020830184612477565b600067ffffffffffffffff8211156124d0576124d061234d565b5060051b60200190565b600082601f8301126124eb57600080fd5b813560206125006124fb836124b6565b612363565b82815260059290921b8401810191818101908684111561251f57600080fd5b8286015b8481101561253a5780358352918301918301612523565b509695505050505050565b6000806040838503121561255857600080fd5b823567ffffffffffffffff8082111561257057600080fd5b818501915085601f83011261258457600080fd5b813560206125946124fb836124b6565b82815260059290921b840181019181810190898411156125b357600080fd5b948201945b838610156125da5785356125cb81612172565b825294820194908201906125b8565b965050860135925050808211156125f057600080fd5b50612441858286016124da565b6020808252825182820181905260009190848201906040850190845b8181101561263557835183529284019291840191600101612619565b50909695505050505050565b60008060006060848603121561265657600080fd5b833592506126666020850161215b565b91506126746040850161215b565b90509250925092565b6000806040838503121561269057600080fd5b6126998361215b565b9150602083013561234281612172565b6000806000606084860312156126be57600080fd5b83356126c981612172565b925060208401359150604084013567ffffffffffffffff8111156126ec57600080fd5b6126f886828701612394565b9150509250925092565b6000806040838503121561271557600080fd5b50508035926020909101359150565b60006020828403121561273657600080fd5b813567ffffffffffffffff81111561274d57600080fd5b61119a84828501612394565b60006020828403121561276b57600080fd5b813561215481612172565b60008060006060848603121561278b57600080fd5b6126c98461215b565b6000602082840312156127a657600080fd5b8135801515811461215457600080fd5b6000602082840312156127c857600080fd5b6121548261215b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561284c5761284c61281c565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261287657612876612851565b500490565b60008282101561288d5761288d61281c565b500390565b60006000198214156128a6576128a661281c565b5060010190565b600181811c908216806128c157607f821691505b602082108114156128e257634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156128fa57600080fd5b815161215481612172565b6000815161291781856020860161244b565b9290920192915050565b600080845481600182811c91508083168061293d57607f831692505b602080841082141561295d57634e487b7160e01b86526022600452602486fd5b8180156129715760018114612982576129af565b60ff198616895284890196506129af565b60008b81526020902060005b868110156129a75781548b82015290850190830161298e565b505084890196505b505050505050611b686129c28286612905565b64173539b7b760d91b815260050190565b6000602082840312156129e557600080fd5b5051919050565b6000826129fb576129fb612851565b500690565b60008219821115612a1357612a1361281c565b500190565b634e487b7160e01b600052602160045260246000fdfea2ff335c1e8f4453e83546c0a966369c53f3e27cc4dcacbc2973964cd5583811a2646970667358221220db57be204eda9d8573775fd8da5b4c1f68e45b63ed26b43888c018952fa8479764736f6c634300080900334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x60806040526004361061023b5760003560e01c80638da5cb5b1161012e578063cef6d368116100ab578063e9dc63751161006f578063e9dc637514610752578063ec7557d314610772578063ed1b314414610788578063f2fde38b1461079d578063feff1999146107bd57600080fd5b8063cef6d368146106ca578063d56d229d146106ea578063e4bfcc601461070a578063e75722301461071d578063e8a3d4851461073d57600080fd5b8063b967810b116100f2578063b967810b14610610578063ba13b5fd14610657578063bb77e7961461066a578063c87b56dd1461068a578063c8966244146106aa57600080fd5b80638da5cb5b14610512578063938e3d7b146105305780639906b9fb14610550578063a7ccabdf146105dc578063b079ac90146105fc57600080fd5b80635d7d02cb116101bc578063777c4ec411610180578063777c4ec41461045257806382d54e8b146104725780638838b5c314610492578063890621da146104c45780638928b9ff146104f257600080fd5b80635d7d02cb146103ae57806364499494146103ce5780636c0360eb146103ee5780636c4a412c14610410578063715018a61461043d57600080fd5b80632782d6c7116102035780632782d6c71461030b5780633ccfd60b1461034a5780634c85eb1f1461035f57806355f804b31461036e5780635b4a505d1461038e57600080fd5b806301ffc9a714610240578063035d6ea51461027557806305d4eef91461029657806312ab3c27146102b8578063195e8708146102db575b600080fd5b34801561024c57600080fd5b5061026061025b36600461212a565b6107dd565b60405190151581526020015b60405180910390f35b34801561028157600080fd5b5060075461026090600160a01b900460ff1681565b3480156102a257600080fd5b506102b66102b1366004612187565b61082f565b005b3480156102c457600080fd5b506102cd61091f565b60405161026c9291906121e2565b3480156102e757600080fd5b506102606102f6366004612266565b60046020526000908152604090205460ff1681565b34801561031757600080fd5b5061032b61032636600461227f565b610b99565b604080516001600160a01b03909316835260208301919091520161026c565b34801561035657600080fd5b506102b6610bba565b34801561036b57600080fd5b50005b34801561037a57600080fd5b506102b66103893660046122ab565b610ca5565b34801561039a57600080fd5b506102b66103a936600461231d565b610ce0565b3480156103ba57600080fd5b506102b66103c9366004612404565b610d8c565b3480156103da57600080fd5b506102b66103e9366004612266565b610dd5565b3480156103fa57600080fd5b50610403610e71565b60405161026c91906124a3565b34801561041c57600080fd5b5061043061042b366004612545565b610eff565b60405161026c91906125fd565b34801561044957600080fd5b506102b661100a565b34801561045e57600080fd5b506102b661046d366004612641565b61103e565b34801561047e57600080fd5b506102b661048d36600461267d565b611120565b34801561049e57600080fd5b506005546001600160a01b03165b6040516001600160a01b03909116815260200161026c565b3480156104d057600080fd5b506104e46104df3660046126a9565b61117b565b60405190815260200161026c565b3480156104fe57600080fd5b506102b661050d366004612702565b6111a2565b34801561051e57600080fd5b506000546001600160a01b03166104ac565b34801561053c57600080fd5b506102b661054b366004612724565b611228565b34801561055c57600080fd5b506105a861056b366004612266565b6009602052600090815260409020805460019091015461ffff80831692620100008104909116916401000000009091046001600160a01b03169084565b6040805161ffff95861681529490931660208501526001600160a01b0390911691830191909152606082015260800161026c565b3480156105e857600080fd5b506102b66105f7366004612759565b61125e565b34801561060857600080fd5b506001610260565b34801561061c57600080fd5b506104e461062b366004612702565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6102b6610665366004612776565b6112aa565b34801561067657600080fd5b50610403610685366004612266565b6113e8565b34801561069657600080fd5b506104036106a5366004612266565b611401565b3480156106b657600080fd5b506102b66106c5366004612794565b61140d565b3480156106d657600080fd5b5061032b6106e5366004612266565b611484565b3480156106f657600080fd5b506007546104ac906001600160a01b031681565b6102b66107183660046127b6565b61149a565b34801561072957600080fd5b506104e4610738366004612266565b611544565b34801561074957600080fd5b5061040361166f565b34801561075e57600080fd5b5061040361076d36600461227f565b611701565b34801561077e57600080fd5b506104e460085481565b34801561079457600080fd5b506102606117e4565b3480156107a957600080fd5b506102b66107b8366004612759565b611815565b3480156107c957600080fd5b506104e46107d836600461227f565b6118ad565b60006001600160e01b03198216630434e6b560e31b148061080e57506001600160e01b0319821663e97405af60e01b145b8061082957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000546001600160a01b031633146108625760405162461bcd60e51b8152600401610859906127d1565b60405180910390fd5b6040805160808101825261ffff808716825285811660208084019182526001600160a01b038087168587019081526060860189815260008d8152600990945292879020955186549451915190921664010000000002640100000000600160c01b0319918616620100000263ffffffff19909516929095169190911792909217919091169190911782555160019091015551600080516020612a2f833981519152906109109087815260200190565b60405180910390a15050505050565b60408051600480825260a082019092526060918291906020820160808036833701905050915073a22dff3bb28c224b6e5f4421d55997656ee34cea8260008151811061096d5761096d612806565b60200260200101906001600160a01b031690816001600160a01b03168152505073d1eddfcc4596cc8bd0bd7495beab9b979fc50336826001815181106109b5576109b5612806565b60200260200101906001600160a01b031690816001600160a01b03168152505073eaf03cd48f9b6b5b9c776c1517ff5fdb958dc94e826002815181106109fd576109fd612806565b6001600160a01b0392831660209182029290920101526000541682600381518110610a2a57610a2a612806565b6001600160a01b039290921660209283029190910182015260408051600480825260a08201909252479290919082016080803683370190505091506064610a72826003612832565b610a7c9190612867565b82600081518110610a8f57610a8f612806565b60209081029190910101526064610aa7826005612832565b610ab19190612867565b82600181518110610ac457610ac4612806565b60209081029190910101526064610adc82600f612832565b610ae69190612867565b82600281518110610af957610af9612806565b60200260200101818152505081600281518110610b1857610b18612806565b602002602001015182600181518110610b3357610b33612806565b602002602001015183600081518110610b4e57610b4e612806565b602002602001015183610b61919061287b565b610b6b919061287b565b610b75919061287b565b82600381518110610b8857610b88612806565b602002602001018181525050509091565b600080610bae6000546001600160a01b031690565b946103e8945092505050565b6000546001600160a01b03163314610be45760405162461bcd60e51b8152600401610859906127d1565b600080610bef61091f565b8151919350915060005b81811015610c9d576000848281518110610c1557610c15612806565b60200260200101516001600160a01b0316848381518110610c3857610c38612806565b602002602001015160405160006040518083038185875af1925050503d8060008114610c80576040519150601f19603f3d011682016040523d82523d6000602084013e610c85565b606091505b50509050508080610c9590612892565b915050610bf9565b50505050565b565b6000546001600160a01b03163314610ccf5760405162461bcd60e51b8152600401610859906127d1565b610cdb6006838361201d565b505050565b6000546001600160a01b03163314610d0a5760405162461bcd60e51b8152600401610859906127d1565b6000828152600960205260409020805462010000900461ffff16610d4157604051631ee8d69960e01b815260040160405180910390fd5b8054640100000000600160c01b0319166401000000006001600160a01b03841602178155604051838152600080516020612a2f833981519152906020015b60405180910390a1505050565b6000546001600160a01b03163314610db65760405162461bcd60e51b8152600401610859906127d1565b6000828152600a602090815260409091208251610cdb928401906120a1565b6000546001600160a01b03163314610dff5760405162461bcd60e51b8152600401610859906127d1565b60008181526009602052604090205462010000900461ffff16610e3557604051631ee8d69960e01b815260040160405180910390fd5b60088190556040518181527fcc65c00b63c085ef56a441de436d8e733d0402287c6b1c7ebe41cbb4d9877e81906020015b60405180910390a150565b60068054610e7e906128ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610eaa906128ad565b8015610ef75780601f10610ecc57610100808354040283529160200191610ef7565b820191906000526020600020905b815481529060010190602001808311610eda57829003601f168201915b505050505081565b60608151835114610f465760405162461bcd60e51b8152602060048201526011602482015270214c454e4754485f4d49534d415443482160781b6044820152606401610859565b825167ffffffffffffffff811115610f6057610f6061234d565b604051908082528060200260200182016040528015610f89578160200160208202803683370190505b50905060005b835181101561100357610fd4848281518110610fad57610fad612806565b6020026020010151848381518110610fc757610fc7612806565b60200260200101516118ad565b828281518110610fe657610fe6612806565b602090810291909101015280610ffb81612892565b915050610f8f565b5092915050565b6000546001600160a01b031633146110345760405162461bcd60e51b8152600401610859906127d1565b610ca360006118f0565b6000546001600160a01b031633146110685760405162461bcd60e51b8152600401610859906127d1565b8061ffff168261ffff161180611080575061ffff8116155b1561109e57604051630baa894960e11b815260040160405180910390fd5b6000838152600960205260409020805462010000900461ffff166110d557604051631ee8d69960e01b815260040160405180910390fd5b805461ffff838116620100000263ffffffff1990921690851617178155604051600080516020612a2f833981519152906111129086815260200190565b60405180910390a150505050565b6000546001600160a01b0316331461114a5760405162461bcd60e51b8152600401610859906127d1565b604080516080810182526001815261012c602082015260009181018290526060810191909152610cdb818484611940565b600061119a8484846111956005546001600160a01b031690565b611a53565b949350505050565b6000546001600160a01b031633146111cc5760405162461bcd60e51b8152600401610859906127d1565b6000828152600960205260409020805462010000900461ffff1661120357604051631ee8d69960e01b815260040160405180910390fd5b60018101829055604051838152600080516020612a2f83398151915290602001610d7f565b6000546001600160a01b031633146112525760405162461bcd60e51b8152600401610859906127d1565b61125b81611b71565b50565b6000546001600160a01b031633146112885760405162461bcd60e51b8152600401610859906127d1565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600754600160a01b900460ff166112d45760405163f89cd0eb60e01b815260040160405180910390fd5b6008546000818152600960209081526040918290208251608081018452815461ffff808216835262010000820416938201939093526401000000009092046001600160a01b03169282018390526001015460608201529061134857604051633123d42760e11b815260040160405180910390fd5b6040805160208082018590528183018790528251808303840181526060909201909252805191012060006113823383878660400151611a53565b6000818152600460205260409020805460ff1916600117905590506113a8838833611940565b7f4ad9c0f6018b9d6efdb6bfb76472c84cca0806aab365506ef8f5fe7e2ab382b1856040516113d791906124a3565b60405180910390a150505050505050565b600a6020526000908152604090208054610e7e906128ad565b60606108293383611701565b6000546001600160a01b031633146114375760405162461bcd60e51b8152600401610859906127d1565b60078054821515600160a01b0260ff60a01b199091161790556040517f40ef16dfbd2f4c9db7d4b66b5a84c42028cdc60338dce0eb9bd4e8b1b1961e4490610e6690831515815260200190565b6000806114913384610b99565b91509150915091565b600754600160a01b900460ff166114c45760405163f89cd0eb60e01b815260040160405180910390fd5b6008546000818152600960209081526040918290208251608081018452815461ffff808216835262010000820416938201939093526401000000009092046001600160a01b031692820183905260010154606082015290156115395760405163cb559a0760e01b815260040160405180910390fd5b610cdb818433611940565b60085460008181526009602090815260408083208151608081018352815461ffff8082168084526201000083049091169583019590955264010000000090046001600160a01b031692810192909252600101546060820152919291908410806115b45750806020015161ffff1684115b156115d257604051639e4e47f560e01b815260040160405180910390fd5b6007546040516331a9108f60e11b8152600481018690526001600160a01b0390911690636352211e9060240160206040518083038186803b15801561161657600080fd5b505afa925050508015611646575060408051601f3d908101601f19168201909252611643918101906128e8565b60015b61165557606001519392505050565b50604051632340e67360e21b815260040160405180910390fd5b60606003805461167e906128ad565b80601f01602080910402602001604051908101604052809291908181526020018280546116aa906128ad565b80156116f75780601f106116cc576101008083540402835291602001916116f7565b820191906000526020600020905b8154815290600101906020018083116116da57829003601f168201915b5050505050905090565b6000818152600a602052604081208054606092919061171f906128ad565b80601f016020809104026020016040519081016040528092919081815260200182805461174b906128ad565b80156117985780601f1061176d57610100808354040283529160200191611798565b820191906000526020600020905b81548152906001019060200180831161177b57829003601f168201915b505050505090506000815111156117b0579050610829565b60066117bb84611bb4565b6040516020016117cc929190612921565b60405160208183030381529060405291505092915050565b6007546000906001600160a01b031661180f5750600780546001600160a01b03191633179055600190565b50600090565b6000546001600160a01b0316331461183f5760405162461bcd60e51b8152600401610859906127d1565b6001600160a01b0381166118a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610859565b61125b816118f0565b604080516001600160a01b038416602082015290810182905230606082015260009060800160405160208183030381529060405280519060200120905092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b826000015161ffff168261ffff1610806119655750826020015161ffff168261ffff16115b1561198357604051639e4e47f560e01b815260040160405180910390fd5b826060015134146119a757604051632635240760e21b815260040160405180910390fd5b600754604051637971ab0f60e11b81526001600160a01b03838116600483015260c06024830152600060c4830181905261ffff86166044840152606483018190526084830181905260a48301529091169063f2e3561e9060e401602060405180830381600087803b158015611a1b57600080fd5b505af1158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9d91906129d3565b600080611ab6611a6387876118ad565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506001600160a01b038316611acc8286611cb2565b6001600160a01b031614611b185760405162461bcd60e51b815260206004820152601360248201527221494e56414c49445f5349474e41545552452160681b6044820152606401610859565b60008181526004602052604090205460ff1615611b685760405162461bcd60e51b815260206004820152600e60248201526d21414c52454144595f555345442160901b6044820152606401610859565b95945050505050565b8051611b849060039060208401906120a1565b507fdf1280b84eee5cd4ce59294c59ec7288bd49034d7f3d142f57ba9b477915636481604051610e6691906124a3565b606081611bd85750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611c025780611bec81612892565b9150611bfb9050600a83612867565b9150611bdc565b60008167ffffffffffffffff811115611c1d57611c1d61234d565b6040519080825280601f01601f191660200182016040528015611c47576020820181803683370190505b5090505b841561119a57611c5c60018361287b565b9150611c69600a866129ec565b611c74906030612a00565b60f81b818381518110611c8957611c89612806565b60200101906001600160f81b031916908160001a905350611cab600a86612867565b9450611c4b565b6000806000611cc18585611cd6565b91509150611cce81611d46565b509392505050565b600080825160411415611d0d5760208301516040840151606085015160001a611d0187828585611f01565b94509450505050611d3f565b825160401415611d375760208301516040840151611d2c868383611fee565b935093505050611d3f565b506000905060025b9250929050565b6000816004811115611d5a57611d5a612a18565b1415611d635750565b6001816004811115611d7757611d77612a18565b1415611dc55760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610859565b6002816004811115611dd957611dd9612a18565b1415611e275760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610859565b6003816004811115611e3b57611e3b612a18565b1415611e945760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610859565b6004816004811115611ea857611ea8612a18565b141561125b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610859565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611f385750600090506003611fe5565b8460ff16601b14158015611f5057508460ff16601c14155b15611f615750600090506004611fe5565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611fb5573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611fde57600060019250925050611fe5565b9150600090505b94509492505050565b6000806001600160ff1b03831660ff84901c601b0161200f87828885611f01565b935093505050935093915050565b828054612029906128ad565b90600052602060002090601f01602090048101928261204b5760008555612091565b82601f106120645782800160ff19823516178555612091565b82800160010185558215612091579182015b82811115612091578235825591602001919060010190612076565b5061209d929150612115565b5090565b8280546120ad906128ad565b90600052602060002090601f0160209004810192826120cf5760008555612091565b82601f106120e857805160ff1916838001178555612091565b82800160010185558215612091579182015b828111156120915782518255916020019190600101906120fa565b5b8082111561209d5760008155600101612116565b60006020828403121561213c57600080fd5b81356001600160e01b03198116811461215457600080fd5b9392505050565b803561ffff8116811461216d57600080fd5b919050565b6001600160a01b038116811461125b57600080fd5b600080600080600060a0868803121561219f57600080fd5b853594506121af6020870161215b565b93506121bd6040870161215b565b92506060860135915060808601356121d481612172565b809150509295509295909350565b604080825283519082018190526000906020906060840190828701845b828110156122245781516001600160a01b0316845292840192908401906001016121ff565b5050508381038285015284518082528583019183019060005b818110156122595783518352928401929184019160010161223d565b5090979650505050505050565b60006020828403121561227857600080fd5b5035919050565b6000806040838503121561229257600080fd5b823561229d81612172565b946020939093013593505050565b600080602083850312156122be57600080fd5b823567ffffffffffffffff808211156122d657600080fd5b818501915085601f8301126122ea57600080fd5b8135818111156122f957600080fd5b86602082850101111561230b57600080fd5b60209290920196919550909350505050565b6000806040838503121561233057600080fd5b82359150602083013561234281612172565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561238c5761238c61234d565b604052919050565b600082601f8301126123a557600080fd5b813567ffffffffffffffff8111156123bf576123bf61234d565b6123d2601f8201601f1916602001612363565b8181528460208386010111156123e757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561241757600080fd5b82359150602083013567ffffffffffffffff81111561243557600080fd5b61244185828601612394565b9150509250929050565b60005b8381101561246657818101518382015260200161244e565b83811115610c9d5750506000910152565b6000815180845261248f81602086016020860161244b565b601f01601f19169290920160200192915050565b6020815260006121546020830184612477565b600067ffffffffffffffff8211156124d0576124d061234d565b5060051b60200190565b600082601f8301126124eb57600080fd5b813560206125006124fb836124b6565b612363565b82815260059290921b8401810191818101908684111561251f57600080fd5b8286015b8481101561253a5780358352918301918301612523565b509695505050505050565b6000806040838503121561255857600080fd5b823567ffffffffffffffff8082111561257057600080fd5b818501915085601f83011261258457600080fd5b813560206125946124fb836124b6565b82815260059290921b840181019181810190898411156125b357600080fd5b948201945b838610156125da5785356125cb81612172565b825294820194908201906125b8565b965050860135925050808211156125f057600080fd5b50612441858286016124da565b6020808252825182820181905260009190848201906040850190845b8181101561263557835183529284019291840191600101612619565b50909695505050505050565b60008060006060848603121561265657600080fd5b833592506126666020850161215b565b91506126746040850161215b565b90509250925092565b6000806040838503121561269057600080fd5b6126998361215b565b9150602083013561234281612172565b6000806000606084860312156126be57600080fd5b83356126c981612172565b925060208401359150604084013567ffffffffffffffff8111156126ec57600080fd5b6126f886828701612394565b9150509250925092565b6000806040838503121561271557600080fd5b50508035926020909101359150565b60006020828403121561273657600080fd5b813567ffffffffffffffff81111561274d57600080fd5b61119a84828501612394565b60006020828403121561276b57600080fd5b813561215481612172565b60008060006060848603121561278b57600080fd5b6126c98461215b565b6000602082840312156127a657600080fd5b8135801515811461215457600080fd5b6000602082840312156127c857600080fd5b6121548261215b565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561284c5761284c61281c565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261287657612876612851565b500490565b60008282101561288d5761288d61281c565b500390565b60006000198214156128a6576128a661281c565b5060010190565b600181811c908216806128c157607f821691505b602082108114156128e257634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156128fa57600080fd5b815161215481612172565b6000815161291781856020860161244b565b9290920192915050565b600080845481600182811c91508083168061293d57607f831692505b602080841082141561295d57634e487b7160e01b86526022600452602486fd5b8180156129715760018114612982576129af565b60ff198616895284890196506129af565b60008b81526020902060005b868110156129a75781548b82015290850190830161298e565b505084890196505b505050505050611b686129c28286612905565b64173539b7b760d91b815260050190565b6000602082840312156129e557600080fd5b5051919050565b6000826129fb576129fb612851565b500690565b60008219821115612a1357612a1361281c565b500190565b634e487b7160e01b600052602160045260246000fdfea2ff335c1e8f4453e83546c0a966369c53f3e27cc4dcacbc2973964cd5583811a2646970667358221220db57be204eda9d8573775fd8da5b4c1f68e45b63ed26b43888c018952fa8479764736f6c63430008090033",
  "devdoc": {
    "author": "Simon Fremaux (@dievardump)",
    "kind": "dev",
    "methods": {
      "allowancesSigner()": {
        "returns": {
          "_0": "the allowance signer address"
        }
      },
      "collect(uint16)": {
        "params": {
          "tokenId": "the token to buy"
        }
      },
      "collectWithSignature(uint16,uint256,bytes)": {
        "params": {
          "nonce": "a simple nonce, allowing multiple claims for one address",
          "signature": "the signature from helixes[currentHelixId].signer",
          "tokenId": "the tokenId to collect"
        }
      },
      "configureHelix(uint256,uint16,uint16,uint256,address)": {
        "params": {
          "endId": "the highest id to collect when this helix is active",
          "helixId": "the helix to configure",
          "price": "the price of collect for this helix",
          "signer": "the signer address (for private sale helixes)",
          "startId": "the lowest token id to collect when this helix is active"
        }
      },
      "constructor": {
        "params": {
          "baseURI_": "the baseURI containing the tokens metadata",
          "contractURI_": "The module URI (containing its metadata) - can be empty ''",
          "owner_": "Address to whom transfer ownership (can be address(0), then owner is deployer)",
          "signer": "the signer for phase 0"
        }
      },
      "contractURI()": {
        "returns": {
          "_0": "the URI where to find information about the module"
        }
      },
      "createMessage(address,uint256)": {
        "params": {
          "account": "the account to allow",
          "nonce": "the nonce"
        },
        "returns": {
          "_0": "the message to sign"
        }
      },
      "createMessages(address[],uint256[])": {
        "params": {
          "accounts": "the accounts to allow",
          "nonces": "the corresponding nonces"
        },
        "returns": {
          "messages": "the messages to sign"
        }
      },
      "getPrice(uint256)": {
        "params": {
          "tokenId": "to check price for"
        },
        "returns": {
          "_0": "the price for the token id in this helix"
        }
      },
      "getSplit()": {
        "returns": {
          "recipients": "the recipients",
          "shares": "their shares"
        }
      },
      "gift(uint16,address)": {
        "params": {
          "recipient": "the recipient to mint to",
          "tokenId": "the tokenId to mint"
        }
      },
      "nonceForHelix(uint256,uint256)": {
        "params": {
          "helixId": "the helix id",
          "nonce": "the nonce for this signature"
        },
        "returns": {
          "_0": "the nonce to sign"
        }
      },
      "onAttach()": {
        "returns": {
          "_0": "if the attach worked"
        }
      },
      "onEnable()": {
        "returns": {
          "_0": "if the enabling worked"
        }
      },
      "overrideTokenURI(uint256,string)": {
        "params": {
          "newTokenURI": "the new token uri",
          "tokenId": "tokenId"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(address,uint256)": {
        "details": "Contrary to EIP2981, modules are expected to return basisPoint for second parameters      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)",
        "params": {
          "registry": "registry to check id of",
          "tokenId": "token to check"
        },
        "returns": {
          "receiver": "and basisPoint for this tokenId"
        }
      },
      "royaltyInfo(uint256)": {
        "details": "Contrary to EIP2981, modules are expected to return basisPoint for second parameters      This in order to allow right royalties on marketplaces not supporting 2981 (like Rarible)",
        "params": {
          "tokenId": "token to check"
        },
        "returns": {
          "_0": "and basisPoint for this tokenId"
        }
      },
      "setBaseURI(string)": {
        "params": {
          "newBaseURI": "the new base uri"
        }
      },
      "setCollectActive(bool)": {
        "params": {
          "isActive": "the new state (active or not)"
        }
      },
      "setContractURI(string)": {
        "params": {
          "newURI": "the new uri"
        }
      },
      "setCurrentHelix(uint256)": {
        "params": {
          "newHelix": "the new helix to mint from"
        }
      },
      "setHelixIds(uint256,uint16,uint16)": {
        "params": {
          "endId": "the highest id to collect when this helix is active",
          "helixId": "the helix to configure",
          "startId": "the lowest token id to collect when this helix is active"
        }
      },
      "setHelixPrice(uint256,uint256)": {
        "params": {
          "helixId": "the helix to configure",
          "price": "the price"
        }
      },
      "setHelixSigner(uint256,address)": {
        "params": {
          "helixId": "the helix to configure",
          "signer": "the signer address"
        }
      },
      "setNFTContract(address)": {
        "params": {
          "nftContract_": "the contract containing nft"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "validateSignature(address,uint256,bytes)": {
        "details": "It ensures that _allowancesSigner signed a message containing (account, nonce, address(this))      and that this message was not already used",
        "params": {
          "account": "the account the allowance is associated to",
          "nonce": "the nonce associated to this allowance",
          "signature": "the signature by the allowance signer wallet"
        },
        "returns": {
          "_0": "the message to mark as used"
        }
      },
      "withdraw()": {
        "details": "Owner withdraw balance function"
      }
    },
    "title": "VisualMassageModule",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowancesSigner()": {
        "notice": "Helper to know allowancesSigner address"
      },
      "baseURI()": {
        "notice": "baseURI containing all metadata files"
      },
      "collect(uint16)": {
        "notice": "collect tokenId"
      },
      "collectActive()": {
        "notice": "if the collect of nfts is active or not"
      },
      "collectWithSignature(uint16,uint256,bytes)": {
        "notice": "Collect with a signature (ie: private sales)"
      },
      "configureHelix(uint256,uint16,uint16,uint256,address)": {
        "notice": "Configure an helix"
      },
      "constructor": {
        "notice": "constructor"
      },
      "contractURI()": {
        "notice": "returns an URI with information about the module"
      },
      "createMessage(address,uint256)": {
        "notice": "Helper that creates the message that signer needs to sign to allow a mint         this is usually also used when creating the allowances, to ensure \"message\"         is the same"
      },
      "createMessages(address[],uint256[])": {
        "notice": "Helper that creates a list of messages that signer needs to sign to allow mintings"
      },
      "currentHelixId()": {
        "notice": "the current helix to mint from"
      },
      "getPrice(uint256)": {
        "notice": "Returns a token id price to collect (reverts if token id not in current helix or already collected)"
      },
      "getSplit()": {
        "notice": "getter for recipients & their shares"
      },
      "gift(uint16,address)": {
        "notice": "Allows the owner of the contract to gift tokenId to recipient"
      },
      "helixes(uint256)": {
        "notice": "all helixes"
      },
      "nftContract()": {
        "notice": "the contract containing the NFTs"
      },
      "nonceForHelix(uint256,uint256)": {
        "notice": "Helper to calculate the nonce to sign for a given tuple (helix, nonce)"
      },
      "onAttach()": {
        "notice": "Called by a Token Registry whenever the module is Attached"
      },
      "onDisable()": {
        "notice": "Called by a Token Registry whenever the module is Disabled"
      },
      "onEnable()": {
        "notice": "this contract doesn't really care if it's enabled or not         since trying to mint on a contract where it's not enabled will fail"
      },
      "overrideTokenURI(uint256,string)": {
        "notice": "override a tokenURI. For reasons."
      },
      "royaltyInfo(address,uint256)": {
        "notice": "Return royalties (recipient, basisPoint) for tokenId"
      },
      "royaltyInfo(uint256)": {
        "notice": "Return royalties (recipient, basisPoint) for tokenId"
      },
      "setBaseURI(string)": {
        "notice": "sets new base uri"
      },
      "setCollectActive(bool)": {
        "notice": "sets collect active"
      },
      "setContractURI(string)": {
        "notice": "sets contract uri"
      },
      "setCurrentHelix(uint256)": {
        "notice": "sets new helix"
      },
      "setHelixIds(uint256,uint16,uint16)": {
        "notice": "Allows to change startId and endId of an helix"
      },
      "setHelixPrice(uint256,uint256)": {
        "notice": "Allows to change the price for an helix"
      },
      "setHelixSigner(uint256,address)": {
        "notice": "Allows to change the signer for an helix"
      },
      "setNFTContract(address)": {
        "notice": "sets nft contract"
      },
      "tokenURIOverride(uint256)": {
        "notice": "overrides a tokenURI"
      },
      "validateSignature(address,uint256,bytes)": {
        "notice": "This function verifies that the current request is valid"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7281,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 299,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "_attached",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)8341_storage"
      },
      {
        "astId": 305,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "_contractURI",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 3811,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "usedAllowances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3813,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "_allowancesSigner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 8722,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "baseURI",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 8725,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "nftContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 8728,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "collectActive",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 8731,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "currentHelixId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 8737,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "helixes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Helix)8719_storage)"
      },
      {
        "astId": 8742,
        "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
        "label": "tokenURIOverride",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Helix)8719_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VisualMassageModule.Helix)",
        "numberOfBytes": "32",
        "value": "t_struct(Helix)8719_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)8341_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 8340,
            "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8040_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Helix)8719_storage": {
        "encoding": "inplace",
        "label": "struct VisualMassageModule.Helix",
        "members": [
          {
            "astId": 8712,
            "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
            "label": "startId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8714,
            "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
            "label": "endId",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 8716,
            "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
            "label": "signer",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8718,
            "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8040_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8035,
            "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8039,
            "contract": "contracts/VisualMassageModule.sol:VisualMassageModule",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}